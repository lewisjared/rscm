[build-system]
requires = [
    'maturin>=1,<2'
]
build-backend = 'maturin'

[tool.maturin]
python-source = "python"
module-name = "rscm._lib"
bindings = 'pyo3'
features = ["pyo3/extension-module"]

[project]
name = "rscm"
version = "0.1.0"
description = "Two layer model implemented in Rust"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "numpy",
    "scmdata>=0.17.0",
]


[tool.uv]
dev-dependencies = [
    "ruff>=0.6.2",
    "pytest>=8.3.2",
    "pip>=24.2",
    "jupytext>=1.16.4",
    "notebook>=7.2.2",
    "seaborn>=0.13.2",
    "matplotlib>=3.9.2",
    "pydot>=3.0.1",
    "bump-my-version>=0.26.1",
]


[tool.ruff]
src = ["python"]
target-version = "py310"
# Provide some leeway for long docstring
line-length = 88


[tool.ruff.lint]
select = [
    "E", # pycodestyle error
    "W", # pycodestyle warning
    "F", # pyflakes
    "I", # isort
    "D", # pydocstyle
    "PL", # pylint
    "TRY", # tryceratops
    "NPY", # numpy rules
    "RUF", # ruff specifics
    "UP", # pyupgrade
    "S", # flake8-bandit
    # pandas support via pandas-vet. In some cases we will want to disable
    # this because it can lead to too many false positives.
    "PD",
]
unfixable = [
    "PD002", # Disable autofix for inplace as this often introduces bugs
]
ignore = [
    "D200", # One-line docstring should fit on one line with quotes
    "D400", # First line should end with a period
    "D105", # Missing docstring in magic method
    "UP007",
    "PD011", # Ruff confused about APIs
]


[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.per-file-ignores]
"test*.py" = [
    "D", # Documentation not needed in tests
    "S101", # S101 Use of `assert` detected
    "PLR2004" # Magic value used in comparison
]
"notebooks/*" = [
    "D100", # Missing docstring at the top of file
    "E402", # Module level import not at top of file
    "S101", # Use of `assert` detected
    "PLR2004", # Magic value used in comparison
]
"scripts/*" = [
    "S101", # S101 Use of `assert` detected
]
"tests/integration/test_compilation.py" = [
    "S603", # `subprocess` call: check for execution of untrusted input
]
"tests/test-data/*" = [
    "I001", # different first-party in generated files
]

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.bumpversion]
current_version = "0.1.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
tag = false
sign_tags = false
tag_name = "v{new_version}"
tag_message = "chore: release {current_version} → {new_version}"
allow_dirty = false
commit = false
message = "chore: release {current_version} → {new_version}"
commit_args = ""

[[tool.bumpversion.files]]
filename = "cargo.toml"

[[tool.bumpversion.files]]
filename = "rscm-core/cargo.toml"

[[tool.bumpversion.files]]
filename = "rscm-core/cargo.toml"
